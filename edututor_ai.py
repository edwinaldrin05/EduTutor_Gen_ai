# -*- coding: utf-8 -*-
"""EduTutor_AI.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ITYnIxMem3xPWOIXzzr9Qy0L9CuIN5Bw
"""





!pip install gradio torch transformers accelerate sentencepiece

import gradio as gr
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM

# ---------------------------
# 🔹 Load Model & Tokenizer
# ---------------------------
model_name = "ibm-granite/granite-3.2-2b-instruct"
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForCausalLM.from_pretrained(
    model_name,
    torch_dtype=torch.float16 if torch.cuda.is_available() else torch.float32,
    device_map="auto" if torch.cuda.is_available() else None
)

if tokenizer.pad_token is None:
    tokenizer.pad_token = tokenizer.eos_token

# ---------------------------
# 🔹 Helper Function
# ---------------------------
def generate_response(prompt, max_length=512):
    inputs = tokenizer(prompt, return_tensors="pt", truncation=True, max_length=512)
    if torch.cuda.is_available():
        inputs = {k: v.to(model.device) for k, v in inputs.items()}

    with torch.no_grad():
        outputs = model.generate(
            **inputs,
            max_length=max_length,
            temperature=0.7,
            do_sample=True,
            pad_token_id=tokenizer.eos_token_id
        )
        generated_tokens = outputs[0][inputs["input_ids"].shape[-1]:]
        response = tokenizer.decode(generated_tokens, skip_special_tokens=True).strip()
        return response

# ---------------------------
# 🔹 Features
# ---------------------------
def concept_explanation(concept):
    prompt = f"Explain the concept of {concept} in detail with example."
    response = generate_response(prompt, max_length=800)
    return "📘 **Explanation:**\n\n" + response + "\n\n---\n✍️ Created by EduTutor_AI team"

def quiz_generator(concept):
    prompt = f"Generate 5 quiz questions about {concept} with different question types (multiple choice, true/false, short answer). Provide answers at the end."
    response = generate_response(prompt, max_length=1200)
    return "📝 **Quiz:**\n\n" + response + "\n\n---\n✍️ Created by EduTutor_AI team"

def quiz_analysis(answers):
    prompt = f"Analyze these student answers and give feedback with strengths and improvements:\n\n{answers}"
    response = generate_response(prompt, max_length=800)
    return "📊 **Performance Analysis:**\n\n" + response + "\n\n---\n✍️ Created by EduTutor_AI team"

# ---------------------------
# 🎨 Gradio UI
# ---------------------------
with gr.Blocks(theme=gr.themes.Soft(primary_hue="indigo", secondary_hue="cyan")) as app:
    # Header Banner
    gr.Markdown(
        """
        # 🎓 EduTutor AI Assistant
        🚀 *Learn Smarter. Practice Better. Analyze Progress.*
        """
    )

    with gr.Tabs():
        # Tab 1 - Concept Explanation
        with gr.TabItem("📘 Concept Explanation"):
            with gr.Row():
                with gr.Column(scale=1):
                    concept_input = gr.Textbox(label="Enter a Concept", placeholder="e.g., Machine Learning")
                    explain_btn = gr.Button("✨ Explain Concept", variant="primary")
                with gr.Column(scale=2):
                    explanation_output = gr.Textbox(label="AI Explanation", lines=12, interactive=False, show_copy_button=True)

            explain_btn.click(concept_explanation, inputs=concept_input, outputs=explanation_output)

        # Tab 2 - Quiz Generator
        with gr.TabItem("📝 Quiz Generator"):
            with gr.Row():
                with gr.Column(scale=1):
                    quiz_input = gr.Textbox(label="Enter a Topic", placeholder="e.g., Photosynthesis")
                    quiz_btn = gr.Button("🎯 Generate Quiz", variant="primary")
                with gr.Column(scale=2):
                    quiz_output = gr.Textbox(label="Quiz Questions & Answers", lines=15, interactive=False, show_copy_button=True)

            quiz_btn.click(quiz_generator, inputs=quiz_input, outputs=quiz_output)

        # Tab 3 - Student Performance
        with gr.TabItem("📊 Student Performance"):
            with gr.Row():
                with gr.Column(scale=1):
                    answers_input = gr.Textbox(label="Paste Student Answers", placeholder="Enter quiz answers here...", lines=8)
                    analyze_btn = gr.Button("🔍 Analyze Performance", variant="primary")
                with gr.Column(scale=2):
                    analysis_output = gr.Textbox(label="Feedback & Suggestions", lines=12, interactive=False, show_copy_button=True)

            analyze_btn.click(quiz_analysis, inputs=answers_input, outputs=analysis_output)

    # Footer
    gr.Markdown("---")
    gr.Markdown("🚀 **AI App created by EduTutor_AI team** | 🔗 Powered by Granite LLM & Gradio")

# Launch the app
app.launch(share=True)